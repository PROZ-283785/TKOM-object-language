-----------------------------------------------------------------------------------------------------------------
Int
Object
character constants: "asdf", 'asdf'

arithmetic operators: + - * /  
logical operators: < > <= >= == != || && ! 
list: [] appending elements in list +=
one-line comment: --

in>> <statement>
out<< <statement>

when <statement> { 

}
else when <statement> {

}
else {

}

loop(start; end; step){

}

object Name{
	atr1 := Int/Object/[]/None;
}

(optional)
object Name(Base_Name){

	fun Name(attrs..):Base_Name(attrs..){
	
	}
	
	--calling default constructor
	fun Name(attrs..){
	
	}
}


fun name(attrs,...){
	(optional)return;
}


-----------------------------------------------------------------------------------------------------------------

object Point {
-- object fields always private
	x := -1;
	y := 2;
	z := None;
	
-- there is no default contructor
	fun Point(){
		this.z := 5;
	}
	
	fun Point(x, y){
		this.x := x;
		this.y := y;
	}
	
	fun getX(){
		return this.x;
	}
	
	fun getY(){
		return this.y;
	}
	
	fun setY(value){
		this.y := value;
	}
	
	operator < (lhs, rhs){
		when lhs.getX() < rhs.getX() {
			return 1;
		}
		else {
			return 0;
		}
		
		
	} 
	
	operator == (lhs, rhs){
		when lhs.getX() == rhs.getX() && lhs.getY() == rhs.getY() {
			return 1;
		} 
		else {
			return 0;
		}
		
		
	}
-- you need to implement this method if you want to print object info
	fun _str_(){
		return this.x 
	}
}

fun fibonnaci(n){

	when (n == 1 || n == 0){
		return 1;
	}
	
	return fibonnaci(n-1) + fibonnaci(n-2);
}

fun main(){
	-- object must be declared before function which is using it
	point := Point(1, 2);
	point2 := Point(2, 3);
	lower := point < point2;
	equal := point == point2;
	out<<equal;
	out<<lower;
	
	points := [];
	points += Point(1, 2);
	points += Point(3, 4);
	loop(i := 1; i := 5; i := i + 1){
		points += Point(i, i);
	}
	
	loop(point:points){
		out<< point;
	}
	
	out<< fibonnaci(2);
}


object Vehicle{
	tires := None;
	
	fun Vehicle(){
	
	}

	fun Vehicle(amount_of_tires){
		this.tires := amount_of_tires;
	}

}

--inheritance
object Car(Vehicle){
	max_speed := 100;

	fun Car(){
	
	}
	
	fun Car(speed, amount_of_tires):Vehicle(amount_of_tires){
		max_speed := speed;
	}
	

}



