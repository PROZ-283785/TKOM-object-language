main(){

    truck = None;
    anotherTruck = None;
    sp1 = 50;
    sp2 = 100;
    Truck(sp1, truck);
    Truck(sp2, anotherTruck);
    newTruck = truck + anotherTruck;
    out<<newTruck.speed;

}


Truck{

    speed = 50;
    Truck(newSpeed, truck out){
        speed = newSpeed;
    }

}


main2(){
    testCar = None;
    testSpeed = 80;
    Car(testSpeed, testCar);
    car = None;
    sp = 10 + 10 * 2;
    age = 50;
    tires = 4;
    sth = 999;
    Car(sp, age, tires, sth, car);
    out<<car.speed;
    anotherCar = None;
    sp = 100;
    age = age + 20;
    sth = 1;
    Car(sp, age, tires, sth, anotherCar);
    out<<anotherCar.speed;
    superCar = car + anotherCar;
    out<<superCar.speed;

}



Movable {
    whatever = None;
    Movable(whateverNew){
        whatever = whateverNew;
    }
}


Vehicle extends Movable{
    age = 20;
    tires = None;

    Vehicle(newAge, newTires, whatever):Movable(whatever){
        age = newAge;
        tires = newTires;
    }

}

Car extends Vehicle{
    speed = None;

    Car(newSpeed, car out){
        speed = newSpeed;
    }

    Car(newSpeed, age, newTires, whatever, car out):Vehicle(age, newTires, whatever){
        speed = newSpeed;
    }

    operator + (lhs, rhs, result out){
        totalSpeed = lhs.speed + rhs.speed;
        Car(totalSpeed, result);
    }

}






randSpeed(speed in, shuffledSpeed out){
    when( speed > 100 ){
        shuffledSpeed = speed * speed;
    } else{
        shuffledSpeed = speed / 2;
    }
}







wypisz(a, b){
    out<<b;
}




f(a, x out){
    b = a + 2;
    f1(b, x);

}

f1(a, y out){
    y = a + 5;
}



sum(b in, c out){

    c = 0;
    d = 5;
    out<< d;
    sum(d, c);
    out<< c;
    ########
    when( b >= 1 ){
        a = b - 1;
        d = 0;
        sum(a, d);
        c = d + b;
    } else {
        c = 0;
    }

}

power(x, y, z out){


    x = 2;
    y = 6;
    z = 0;

    power(x, y, z);
    out<< z;
    #########powyzej jak wywolac

    when( y == 1 ){
        z = x;
    } else {
        c = y - 1;
        d = None;
        power(x, c, d);
        z = x * d;
    }

}



fun(a in){
    out<<a;
    b = 9;
    c = 3;
    out<< c;
    fun2(b, c);
    out<< c;
}

fun2(b, c out){
    out<< b * b;
    c = 5;
}


pomocniczyFun(){



#petle
b = 2;
    a = b;
    a = a + 2;
    out<<a;

    i = 5;
    out<< i;
    loop( i = 1; i < 5; i = i + 1){
        loop( j = 1; j <= i; j = j + 1){
            out<<'i';
            out<<i;
            out<<'j';
            out<<j;
        }
    }



###

    i = 0;
    a = 1;
    out<<'Wejscie';
    out<< i;
    out<< a;

    when( a != 2 && a >= 1){
        out<<'mam';
    }


# testy when
    when(a < 3){
        i = i + 1;
        out<<'Wnetrze pierwsze';
        out<< i;
        out<< a;
        a = 3;
        when(a == 3){
            out<<'Wnetrze drugie';
            i = i + 1;
            out<< i;
            a = 4;
            out<< a;
        }
        out<< i;
        out<< a;
    }else when(a == 3){
        out<< i;
        out<< a;
    }else{
        out<< i;
        out<< a + 3;
    }
    out<< i;
    out<< a;


    ########

    b = None;
    in>> b;
    a = 4 + b;
    out<< a;
    a = a + 4;
    out<< a;
    out<< a * (2 - 4) * (2 + 3 + 4) * 4;
}


nowaFunkcja() extends obiekt{
    out<<'a';
}

funkcja(a in, b out, c in out, d)  extends obiekt{

    a = 1;
    b = 2;
    dodaj(a, b, c);
    d = ((a + -b) * (a + c));
    a = b * c.b;

    when( i == 1 ){
        out<<'1';
    } else when( i == 2 ){
        in>>a;
    } else {
        this.a = b;
    }

    loop( i = 1; i < 5; i = i + 1){
        a = b;
    }


    a = c + d + a + 2 + a.b;
    a = car.run(a in out);
    loop(a:b){
        in>>a;
    }
    out<< a + b + c;
}

dodaj(a in, b in, c out){
    c = a + b;

}
obiekt1{
    a = 5;
    operator = (){

    }

    fun(a in, b out){

    }

}

obiekt extends obiekt1{
    obiekt(a):obiekt1(a){

    }
}


