-----------------------------------------------------------------------------------------------------------------
Int
Object
character constants: "asdf", 'asdf'
list: [], list.append(), list.remove(index), list[index]

arithmetic operators: + - * /  
logical operators: < > <= >= == != || && ! 
one-line comment: --

in>> <statement>
out<< <statement>

when <statement> {

}
else when <statement> {

}
else {

}

loop(start; end; step){

}

loop(identifier:list_name){

}

object Name{
	atr1 {get; set;} = Int/Object/[]/None;
}

(optional)
object Name(Base_Name){

	fun Name(args..):Base_Name(args..){
	
	}
	
	--calling default constructor for base object
	fun Name(args..){
	
	}
}


fun name(args,...){
	(optional)return;
}


-----------------------------------------------------------------------------------------------------------------

object Point {
-- object fields always private
	x {get; set;} = -1;
	y {get; set;} = 2;
	z = None;
	
-- there is no default contructor
	fun Point(){
		z = 5;
	}
	
	fun Point(x, y){
		this.x = x;
		this.y = y;
	}

	operator < (lhs, rhs, result OUT){
		when lhs.x < rhs.x {
			result = 1;
		}
		else {
			result = 0;
		}
		
		
	} 
	
	operator == (lhs, rhs, result OUT){
		when lhs.getX() == rhs.getX() && lhs.getY() == rhs.getY() {
			result = 1;
		} 
		else {
			result = 0;
		}
		
		
	}

}

fun _str_(text OUT) extends Point{
		text = x + y;
	}


fun fibonacci(n IN OUT){

	when (n == 1 || n == 0){
		n = 1;
	}
	
	n = fibonacci(n-1) + fibonacci(n-2);
}

fun main(){
	-- object must be declared before function which is using it
	point = Point(1, 2);
	point2 = Point(2, 3);
	lower = point < point2;
	equal = point == point2;
	out<<equal;
	out<<lower;
	
	points = [];
	points += Point(1, 2);
	points += Point(3, 4);
	loop(i = 1; i = 5; i = i + 1){
		points += Point(i, i);
	}
	
	loop(point:points){
		out<< point;
	}
	
	out<< fibonnaci(2);
}


object Vehicle{
	tires = None;
	
	fun Vehicle(){
	
	}

	fun Vehicle(amount_of_tires){
		this.tires = amount_of_tires;
	}

}

--inheritance
object Car(Vehicle){
	max_speed = 100;

	fun Car(){
	
	}
	
	fun Car(speed, amount_of_tires):Vehicle(amount_of_tires){
		max_speed = speed;
	}
	

}



